var searchIndex = {};
searchIndex["assembler"] = {"doc":"","items":[[5,"test_assembler","assembler","",null,{"inputs":[],"output":null}]],"paths":[]};
searchIndex["backend"] = {"doc":"","items":[[0,"instructions","backend","",null,null],[3,"Address","backend::instructions","A 16-bit address `NNN`",null,null],[3,"Byte","","8-bit information in an opcode. `NN`",null,null],[3,"Nibble","","4-bit information in an opcode. `N`",null,null],[4,"Instructions","","This contains all of the instructions in the Chip-8 instruction set.",null,null],[13,"Clear","","Clear the screen.",0,null],[13,"Return","","Return from a subroutine.",0,null],[13,"Jump","","Jump to address `NNN`.",0,null],[13,"Call","","Call the subroutine at address `NNN`.",0,null],[13,"SkipEqualK","","Skip the following instruction\nif the value of register `VX` equals `NNN`.",0,null],[13,"SkipNotEqualK","","Skip the following instruction\nif the value of register `VX` does not equal `NNN`.",0,null],[13,"SkipEqual","","Skip the following instruction if the value of register `VX`\nis equal to the value of register `VY`.",0,null],[13,"StoreK","","Store number `NNN` in register `VX`.",0,null],[13,"AddK","","Add the value `NNN` to register `VX`.",0,null],[13,"Store","","Store the value of register `VY` in register `VX`.",0,null],[13,"Or","","Set `VX` to `VX` OR `VY`.",0,null],[13,"And","","Set `VX` to `VX` AND `VY`.",0,null],[13,"Xor","","Set `VX` to `VX` XOR `VY`.",0,null],[13,"Add","","Add the value of register `VY` to register `VX`.",0,null],[13,"Sub","","Subtract the value of register `VY` from register `VX`.",0,null],[13,"ShiftRight","","Store the value of register `VY` shifted right one bit in register `VX`.",0,null],[13,"SubReversed","","Set register `VX` to the value of `VY` minus `VX`.",0,null],[13,"ShiftLeft","","Store the value of register `VY` shifted left one bit in register `VX`.",0,null],[13,"SkipNotEqual","","Skip the following instruction if the value of register `VX`\nis not equal to the value of register `VY`.",0,null],[13,"StoreI","","Store memory address `NNN` in register `I`.",0,null],[13,"JumpOffset","","Jump to address `NNN` + `V0`.",0,null],[13,"Random","","Set `VX` to a random number with a mask of `NN`.",0,null],[13,"Draw","","Draw a sprite at position `VX`,`VY` with `N` bytes of sprite\ndata starting at the address stored in `I`.",0,null],[13,"SkipKeyPressed","","Skip the following instruction if the key corresponding to\nthe hex value currently stored in register `VX` is pressed.",0,null],[13,"SkipKeyNotPressed","","Skip the following instruction if the key corresponding to\nthe hex value currently stored in register `VX` is not pressed.",0,null],[13,"StoreDelayTimer","","Store the current value of the delay timer in register `VX`.",0,null],[13,"WaitForKeypressAndStore","","Wait for a keypress and store the result in register `VX`.",0,null],[13,"SetDelayTimer","","Set the delay timer to the value of register `VX`.",0,null],[13,"SetSoundTimer","","Set the sound timer to the value of register `VX`.",0,null],[13,"AddToI","","Add the value stored in register `VX` to register `I`.",0,null],[13,"LoadHexGlyph","","Set `I` to the memory address of the sprite data corresponding\nto the hexadecimal digit stored in register `VX`.",0,null],[13,"StoreBCD","","Store the binary-coded decimal equivalent of the value\nstored in register `VX` at addresses `I`, `I+1`, and `I+2`.",0,null],[13,"StoreRegisters","","Store the values of register `V0` to `VX` inclusive in memory\nstarting at address `I`.",0,null],[13,"LoadRegisters","","Fill registers `V0` to `VX` inclusive with the values stored\nin memory starting at address `I`.",0,null],[13,"Invalid","","Any instruction received that does not belong to the Chip-8 instruction set.",0,null],[6,"Vx","","Represents an arbitrary 8-bit register.",null,null],[6,"Vy","","Represents an arbitrary 8-bit register.",null,null]],"paths":[[4,"Instructions"]]};
searchIndex["chip8"] = {"doc":"","items":[[5,"test_assembler","chip8::asm","",null,null],[5,"test_disassembler","chip8::disasm","",null,null]],"paths":[]};
searchIndex["disassembler"] = {"doc":"","items":[[5,"test_disassembler","disassembler","",null,{"inputs":[],"output":null}]],"paths":[]};
initSearch(searchIndex);
